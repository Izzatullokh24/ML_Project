# -*- coding: utf-8 -*-
"""05-ml-05-amaliyot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Z0R_SwtaLYFKJzQSFgLvibDDNOpVhVH

![Imgur](https://i.imgur.com/5pXzCIu.png)

# Data Science va Sun'iy Intellekt Praktikum

## 5-MODUL. Machine Learning

### Portfolio uchun vazifa: Toshkent shahrida uylarning narxini aniqlash.

Ushbu amaliyotda sizning vazifangiz berilgan ma`lumotlar asosida Toshkent shahridagi uylarning narxini aniqlash.
"""

import pandas as pd
import numpy as np
df = pd.read_csv('https://raw.githubusercontent.com/anvarnarz/praktikum_datasets/main/housing_data_08-02-2021.csv')
df.head()

"""# Ustunlar ta'rifi
- `location` - sotilayotgan uy manzili
- `district` - uy joylashgan tuman
- `rooms` - xonalar soni
- `size` - uy maydoni (kv.m)
- `level` - uy joylashgan qavat
- `max_levels` - ja'mi qavatlar soni
- `price` - uy narxi

## Vazifani CRSIP-DM Metolodgiyasi yordamida bajaring.
<img src="https://i.imgur.com/dzZnnYi.png" alt="CRISP-DM" width="800"/>
"""

df.info()

df.describe()

df[df['price']== 'Договорная']

pd.to_numeric(df['size'])

df.replace('Площадьземли:1сот', 53, inplace=True)
df['size']=pd.to_numeric(df['size'])

df.info()

pd.to_numeric(df['price'])

df.replace('Договорная', 50000, inplace=True)

df['price'] = pd.to_numeric(df['price'])

df.info()

from sklearn.model_selection import train_test_split
train_set,test_set=train_test_split(df, test_size=0.2, random_state=42)
X_train=train_set.drop('price',axis=1)
y_train=train_set['price'].copy()
df_test=train_set.drop(['location','district','price'],axis=1)
df_columns=train_set.drop(['location','district','price'],axis=1)
df_cat=train_set['district'].copy()

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OrdinalEncoder, StandardScaler
from sklearn.compose import ColumnTransformer

def std(dataset):
  Std_scaler=StandardScaler()
  return Std_scaler.fit_transform(dataset)
def encoder(cat_dataset):
  cat_attribs=['district']
  pipeline=ColumnTransformer([
                              ('cat',OrdinalEncoder(),cat_attribs)
  ])
  return pipeline.fit_transform(cat_dataset)
df_num=std(df_test)
district=encoder(X_train)
df_ready=pd.DataFrame(df_num,columns=df_columns.columns, index=X_train.index)
df_labels=pd.DataFrame(district,columns=['district'],index=X_train.index)
df_ready['district']=df_labels['district']

from sklearn.ensemble import RandomForestRegressor
RF_model = RandomForestRegressor()
RF_model.fit(df_ready, y_train)

predict=RF_model.predict(df_ready)
predict

pd.DataFrame({'Prognoz':predict, 'Real baxosi': y_train})

from sklearn.metrics import mean_squared_error
mse=mean_squared_error(predict,y_train)
xatolik=np.sqrt(mse)
print(xatolik)

import pickle
filename='RF_model.pkl'
with open(filename,'wb') as file:
  pickle.dump(RF_model,file)